// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlgen

import (
	"context"
)

const listCharacters = `-- name: ListCharacters :many
SELECT character_id, server_id, character_name, job_id, job_grow_id, rank FROM characters
`

func (q *Queries) ListCharacters(ctx context.Context) ([]Character, error) {
	rows, err := q.db.Query(ctx, listCharacters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.CharacterID,
			&i.ServerID,
			&i.CharacterName,
			&i.JobID,
			&i.JobGrowID,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacter = `-- name: UpdateCharacter :exec
INSERT INTO characters (character_id, server_id, character_name, job_id, job_grow_id)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT(character_id)
DO UPDATE SET
    server_id = $2,
    character_name = $3,
    job_id = $4,
    job_grow_id = $5
`

type UpdateCharacterParams struct {
	CharacterID   string
	ServerID      string
	CharacterName string
	JobID         string
	JobGrowID     string
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) error {
	_, err := q.db.Exec(ctx, updateCharacter,
		arg.CharacterID,
		arg.ServerID,
		arg.CharacterName,
		arg.JobID,
		arg.JobGrowID,
	)
	return err
}

const updateCharactersRank = `-- name: UpdateCharactersRank :exec
WITH RankedCharacters AS (
    SELECT character_id, ROW_NUMBER() OVER (ORDER BY fame DESC) as calculated_rank
    FROM characters c
    WHERE c.job_id = $1 and c.job_grow_id = $2
)
UPDATE characters c
SET rank = rc.calculated_rank
FROM RankedCharacters rc
WHERE c.character_id = rc.character_id
`

type UpdateCharactersRankParams struct {
	JobID     string
	JobGrowID string
}

func (q *Queries) UpdateCharactersRank(ctx context.Context, arg UpdateCharactersRankParams) error {
	_, err := q.db.Exec(ctx, updateCharactersRank, arg.JobID, arg.JobGrowID)
	return err
}
